#!/bin/bash

# ===== variables
PROJECT_NAME="mkv2mp4"
VERSION="mkv2mp4 v1.2"
UPDATE_URL="https://intechgeek.com/mkv-to-mp4/"

DESKTOP_SHORTCUT=/home/$(whoami)/.local/share/applications/mkv-to-mp4.desktop
BASE=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
THIS_SCRIPT=$BASE/$(basename $0)
IN_DIR=$BASE/input
OUT_DIR=$BASE/output
TOOLS_DIR=$BASE/tools
SRT_DIR=$BASE/srt
FFMPEG="$TOOLS_DIR/ffmpeg"
ICON=$TOOLS_DIR/icon.png

# ===== ANSI color code variables
BOLD="\e[1m"
CYAN="\e[96m"
BLUEBG="\e[104m"
GREEN="\e[0;32m"
HRED="\e[0;91m"
WHITE="\e[97m"
NC="\e[0m"
EXPND="\e[K"
CYAN="\e[96m"

# ===== for centering strings
ECHO_CENTER() {
	printf "%*s\n" $((( ${#1} + $(tput cols) ) / 2)) "$1"
}

# ===== ECHO_CENTER variables go here
NAME_TXT=$(ECHO_CENTER "$PROJECT_NAME")

# ===== continue
PRESS_ENTER() {
	echo ""
	echo -n -e "	${GREEN}Press Enter to continue${NC} "
	read
	clear
}

# ===== incorrect selection
INCORRECT_SELECTION() {
	echo -e "${HRED}Incorrect selection! Try again.${NC}"
}

# ===== convert mkv files
CONVERT_FILES() {
	if ls $IN_DIR/*.mkv > /dev/null 2>&1; then
		for i in $IN_DIR/*.mkv; do
			$FFMPEG -y -i "$i" -codec copy -movflags +faststart "${i%.*}.mp4"
		done
		mv -f $IN_DIR/*.mp4 $OUT_DIR/
	else
		echo -e "${HRED}There are no mkv files in the $IN_DIR folder${NC}"
	fi
}

# ===== clean input, srt, and output folders
CLEAN_INPUT() {
	echo -e "${GREEN}Clean the ${BOLD}input ${GREEN}folder?${NC}"
	echo ""
	read -e -p "(Y/n) $ " CLEAN_IN
	if [[ -z $CLEAN_IN || $CLEAN_IN =~ ^([yY]|[yY][eE][sS]) ]]; then
		find $IN_DIR -type f -not -name "readme" -delete
		echo -e "${GREEN}Clean!${NC}"
		echo ""
	fi

	echo -e "${GREEN}Clean the ${BOLD}srt ${GREEN}folder?${NC}"
	echo ""
	read -e -p "(Y/n) $ " CLEAN_SRT
	if [[ -z $CLEAN_SRT || $CLEAN_SRT =~ ^([yY]|[yY][eE][sS]) ]]; then
		find $SRT_DIR -type f -not -name "readme" -delete
		echo -e "${GREEN}Clean!${NC}"
		echo ""
	fi

	echo -e "${GREEN}Clean the ${BOLD}output ${GREEN}folder?${NC}"
	echo ""
	read -e -p "(Y/n) $ " CLEAN_OUT
	if [[ -z $CLEAN_OUT || $CLEAN_OUT =~ ^([yY]|[yY][eE][sS]) ]]; then
		find $OUT_DIR -type f -not -name "readme" -delete
		echo -e "${GREEN}Clean!${NC}"
		echo ""
	fi
}

# ===== check for update
VISIT_ITG() {
	echo ""
	echo "Visit website?"
	read -e -p "(Y/n) $ " VISIT
	if [[ -z $VISIT || $VISIT =~ ^([yY]|[yY][eE][sS]) ]]; then
		if command -v xdg-open > /dev/null; then
			xdg-open $UPDATE_URL > /dev/null 2>&1
		elif command -v gnome-open > /dev/null; then
			gnome-open $UPDATE_URL > /dev/null 2>&1
		fi
	fi
	clear
}
CHECK_FOR_UPDATE() {
	echo -e "${GREEN}Please wait...${NC}"
	echo ""
	SITE_VERSION=$(wget -q $UPDATE_URL -O - | grep -m 1 -o -P '.{0,0}mkv2mp4 v.{0,3}')
	if [[ $VERSION == $SITE_VERSION ]]; then
		echo -e "${GREEN}Your installed version is up to date"
		echo ""
		echo -e "For more info visit:${NC}"
		echo -e "${CYAN}$UPDATE_URL${NC}"
		VISIT_ITG
	else
		echo -e "${GREEN}Update available"
		echo ""
		echo -e "To download the latest version go to:${NC}"
		echo -e "${CYAN}$UPDATE_URL${NC}"
		VISIT_ITG
	fi
}

# ===== append srt to mp4
APPEND_SRT() {
	if ls $IN_DIR/*.mp4 > /dev/null 2>&1; then
		MP4_DIR_0=$(echo "$IN_DIR/*.mp4")
	fi
	if ls $OUT_DIR/*.mp4 > /dev/null 2>&1; then
		MP4_DIR_1=$(echo "$OUT_DIR/*.mp4")
	fi
	if ls $SRT_DIR/*.srt > /dev/null 2>&1; then
		SRT_DIR_0=$(echo "$SRT_DIR/*.srt")
	fi
	if [[ ! -z $MP4_DIR_0 || ! -z $MP4_DIR_1 ]] && [[ ! -z $SRT_DIR_0 ]]; then
		PROMPT="
Please select an mp4:"
		OPTIONS=( $MP4_DIR_0 $MP4_DIR_1 )
		PS3="$PROMPT "
		echo ""
		select MP4 in "${OPTIONS[@]}" "Quit" ; do 
			if (( REPLY == 1 + ${#OPTIONS[@]} )) ; then
				clear
				break
			elif (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )) ; then
				clear
				break
			else
				echo -e "${HRED}Invalid selection. Try again.${NC}"
			fi
		done

		if [[ $MP4 != "Quit" ]]; then
			PROMPT2="
Please select an srt:"
			OPTIONS2=( $SRT_DIR_0 )
			PS3="$PROMPT2 "
			echo ""
			select SRT in "${OPTIONS2[@]}" "Quit" ; do 
				if (( REPLY == 1 + ${#OPTIONS2[@]} )) ; then
					clear
					break
				elif (( REPLY > 0 && REPLY <= ${#OPTIONS2[@]} )) ; then
					clear
					break
				else
					echo -e "${HRED}Invalid selection. Try again.${NC}"
				fi
			done
		fi

		if [[ $MP4 != "Quit" && $SRT != "Quit" ]]; then
			$FFMPEG -y -i "$MP4" -i "$SRT" -c copy -c:s mov_text "$OUT_DIR/outfile-srt.mp4"
		else
			echo -e "${HRED}Aborted!${NC}"
		fi
	else
		echo -e "${HRED}Aborted!"
		echo -e "${GREEN}Make sure you have an mp4 file in"
		echo "either the input or output folder. Also make"
		echo -e "sure to have an srt file in the srt folder.${NC}"
	fi
}

# ===== create desktop shortcut
ADD_DESKTOP_SHORTCUT() {
	echo "[Desktop Entry]" > $DESKTOP_SHORTCUT
	echo "Type=Application" >> $DESKTOP_SHORTCUT
	echo "Name=$PROJECT_NAME" >> $DESKTOP_SHORTCUT
	echo "Exec=\"$THIS_SCRIPT\" %U" >> $DESKTOP_SHORTCUT
	echo "Icon=$ICON" >> $DESKTOP_SHORTCUT
	echo "Categories=Utility;" >> $DESKTOP_SHORTCUT
	echo "Terminal=true" >> $DESKTOP_SHORTCUT

	# Updates the desktop entries
	gtk-update-icon-cache /usr/share/icons/hicolor

	if [[ -f $DESKTOP_SHORTCUT ]]; then
		echo -e "${GREEN}Desktop entry added for ${CYAN}${BOLD}$(whoami)${NC}"
		echo -e "${GREEN}Check your apps dash for the shortcut.${NC}"
	else
		echo -e "${HRED}oops! Shortcut failed. Please try again.${NC}"
	fi
}

# ===== menu
clear
SELECTION=
until [[ $SELECTION = 0 ]]; do
    echo -e "${BLUEBG}${EXPND}${WHITE}${BOLD}$NAME_TXT${NC}"
    echo ""
    echo "	1  -  Convert mkv to mp4"
    echo "	2  -  Append subtitle srt to mp4"
    echo "	3  -  Clean input, srt or output folders"
    echo "	4  -  Check for update"
    echo "	5  -  Add Desktop Shortcut"
    echo "	0  -  Exit"
    echo ""
    echo -n "	Enter selection: "
    read SELECTION
    echo ""
    case $SELECTION in
        1 ) clear ; CONVERT_FILES ; PRESS_ENTER ;;
        2 ) clear ; APPEND_SRT ; PRESS_ENTER ;;
        3 ) clear ; CLEAN_INPUT ; PRESS_ENTER ;;
        4 ) clear ; CHECK_FOR_UPDATE ;;
        5 ) clear ; ADD_DESKTOP_SHORTCUT ; PRESS_ENTER ;;
        0 ) clear ; exit ;;
        * ) clear ; INCORRECT_SELECTION ; PRESS_ENTER ;;
    esac
done
